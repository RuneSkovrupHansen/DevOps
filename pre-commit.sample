#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

# git rev-parse
# https://stackoverflow.com/questions/15798862/what-does-git-rev-parse-do

# A support plumbing command used for manipulation, common
# usage is to print the SHA1 hashes of a given revision
# specifier. The option --verify can be used to verify that
# the specified object is a valid git object.

# Check that HEAD is a valid git object, discard output
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# Get git configuration variable, assign a variable the
# value of the git config call.

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# Compare the current working tree or index, to a tree, i.e. compare files
# The --check option checks for the introduction of whitespace errors.
# The --cached option makes the command not consider on-disk file at all.
# Is this potentially a way to avoid checking the original files, when we
# only want to check the introduction of new errors?

# Index refers to the staged files.
# Working tree are the files and folders outside of the .git folder.
# Working tree often refered to as workspace or working directory
# technical name is working tree.

# Explanation:
# The command git diff-index allows us to compare the working tree (files
# and folders not in .git), or the index, staged files, to another tree.
# Use of the --cached command makes git only compare the staged files,
# this is useful for a pre-commit, since we'll only be checking the files
# which are staged to be commited.
# The --check option checks for whitespace errors.

# https://git-scm.com/docs/git-diff-index
# https://www.theserverside.com/video/Understand-the-Git-working-tree-status-command-for-easy-DVCS

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

# The exec command is used multiple times in this sample.
# The command is a builin command of bash, allows you to
# execute a command that completely relaces the current
# process. The current shell process is destroyed, and
# entierly replaced by the command you specify.

# Can serve as a form of redirection.
